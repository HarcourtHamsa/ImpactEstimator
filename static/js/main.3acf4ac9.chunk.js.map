{"version":3,"sources":["components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","id","App","lang","charset","rel","href","name","content","htmlFor","type","data-population","data-time-to-elapse","data-reported-case","data-total-hospital-beds","data-period-type","value","selected","data-go-estimate","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3acf4ac9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className=\"navbar navbar-expand-md navbar-light p-3  mb-4 \"\r\n        id=\"navbar\"\r\n      >\r\n          <p className=\"h5 font-weight-bold text-warning\">#BuildforSDG Challenge 2020</p>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport MetaTags from \"react-meta-tags\";\n\nexport default function App() {\n  return (\n    <div>\n      <MetaTags>\n        <html lang=\"en\" />\n        <meta charset=\"utf-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"theme-color\" content=\"#000000\" />\n        <title>BuildForSDG Challenge</title>\n        <meta\n          name=\"description\"\n          content=\"Web site created using create-react-app\"\n        />\n      </MetaTags>\n      <Nav />\n      <div className=\"container mt-5\">\n        <p className=\"mb-5 font-weight-bold\">COVID19 IMPACT ESTIMATOR</p>\n\n        <div className=\"row\">\n          <div className=\"col-xl-6\">\n            <dorm>\n              <div className=\"form-control-group\">\n                <div className=\"form-row\">\n                  <div className=\"col-xl-6\">\n                    <label htmlFor=\"#population\" className=\"\">\n                      Population\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control mb-3\"\n                      id=\"population\"\n                      data-population\n                    />\n                  </div>\n                  <div className=\"col-xl-6\">\n                    <label htmlFor=\"#population\" className=\"\">\n                      Time to elapse\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control mb-3\"\n                      data-time-to-elapse\n                    />\n                  </div>\n                </div>\n\n                <div className=\"form-row\">\n                  <div className=\"col-xl-6\">\n                    {\" \"}\n                    <label htmlFor=\"#population\" className=\"\">\n                      Reported cases\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control mb-3\"\n                      data-reported-case\n                    />\n                  </div>\n                  <div className=\"col-xl-6\">\n                    {\" \"}\n                    <label htmlFor=\"#population\" className=\"\">\n                      Hostpital beds\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control mb-3 \"\n                      data-total-hospital-beds\n                    />\n                  </div>\n                </div>\n\n                <label htmlFor=\"#population\" className=\"\">\n                  Period type\n                </label>\n                <select\n                  className=\"browser-default custom-select mb-5\"\n                  data-period-type\n                >\n                  <option value=\"2\" selected>\n                    Days\n                  </option>\n                  <option value=\"3\">Weeks</option>\n                  <option value=\"4\">Months</option>\n                </select>\n\n                <button\n                  type=\"submit\"\n                  className=\"btn p-3  pl-5 pr-5 rounded-0 btn-block\"\n                  data-go-estimate\n                >\n                  Get Estimate\n                </button>\n              </div>\n            </dorm>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}